/*
Gramatica para el Robot:
Autor: Alejandro Arango
Modificado por: Silvia Takahashi
Modificado por: Juan Pablo Morales.
Agregadas producciones para manejar globos
Modificado por Silvia Takahashi


 **/


options 
{
  
	LOOKAHEAD=1; 
	IGNORE_CASE=true;
	STATIC = false;
	
}
   

PARSER_BEGIN(Robot)

package uniandes.lym.robot.control;

import uniandes.lym.robot.kernel.*;
import uniandes.lym.robot.view.Console;
 
import java.awt.Point;
import java.io.*;
import java.util.Vector;
import java.util.LinkedList;

@SuppressWarnings("serial")
public class Robot 
{

	private RobotWorldDec world;
	private HashMap<String,Integer> hashVariable = new HashMap();
	private HashMap<String,ArrayList<String> > defProcParameter = new HashMap();
	private ArrayList<Integer> lista = new ArrayList<Integer>();
	
	
	
	void setWorld(RobotWorld w) {
		world = (RobotWorldDec) w;	
	}

	String salida=new String();
}
PARSER_END(Robot)

SKIP:
{
	" "
	|	"\r"
	|	"\t"
	| "\n"
}

TOKEN: /* Nombres de Comandos */
{

			<MOV:  "move">
		| 	<RIGHT: "right">
		| 	<PUT: "Put">
		| 	<PICK: "Pick">
		|  < POP: "Pop" >
		|  <GO: "Go" >
        |  < HOP:  "Hop" >		

}

TOKEN:
{
	< JUMP:"jump">
| 	< WALK: "walk" >
|   < LEAP: "leap" >
|   < TURN: "turn" >
|   < TURNTO: "turnto" >
|   < DROP: "drop" >
|   < GET: "get" >
|   < GRAB: "grab" >
|   < LETGO: "letGo" >
|   < NOP: "nop" >

}

TOKEN:
{
		<BALLOONS:  "baloons" >
		|	 <CHIPS:  "chips"  >
		|    <DEFVAR: "defVar" >
		|    <DEFPROC: "defProc">
		|    <COMA: "," > 

}



TOKEN :
{
		    <NUM: (<DIGIT>)+ >
		|  	<#DIGIT: ["0"-"9"] >
		|   <#LETTERS: ["A"-"Z"] >
		|   <NAME: (<LETTERS>)+ >
        
}


boolean command(Console sistema):
{	
	int x,y;
	salida=new String();	
}

{
  compilerOptions()
  
  { try {Thread.sleep(900);}
	catch (InterruptedException e) {System.err.format("IOException: %s%n", e);}	 
	return true; }
	
| <EOF> {return false;} 
}

	void compilerOptions(): { }
	{
	variableDefinition()
|   procedureDefinition()
|   defaultCommand()
|  	"{" simpleCommand() "}" 
	}	


// definition of variables or procedures


	void variableDefinition(): { int value; String key;}
	{

		<DEFVAR> variableName = nombre() "=" value = num() {hashVariable.put(variableName,value);}

	}

	void procedureDefinition(): {String procedureName;}
	{
		<DEFPROC> procedureName = nombre()
		
		"(" ( (procParameter(procedureName)("," procParameter(procedureName))* ) )? ")"
		
		"{" (storeCommand(procedureName))(";"(storeCommand(procedureName)))* "}"
		  
	}

// Methods related to any type of command

	//store commands for functions

	void storeCommand(String procName): { }
	{
		storeSimpleCommand(procName)|storeDefaultCommand(procName)
	}	

	void storeSimpleCommand(String procName): {}
	
	{
		<JUMP> "(" (numericParameter())(numericParameter()) ")"
	}

	void numericParameter(String procName): { }

	{
		<NUM> |  possibleFunctionParameter() | possibleDefinedVariable()
	}



	void storeDefaultCommand(String procName): {}
	{
		"faltica hacerlo"
	}
	


	//Executable commands
	
	void anyCommand(): { }
	{
		simpleCommand()|defaultCommand()
	}



	void simpleCommand(): {}
	{

		<JUMP> "("  ")"
	   
	}
	
	
	void defaultCommand(): {}
	
	{
	  
( //INICIO GRAN PARENTESIS

	( <RIGHT> "(" ")" {world.turnRight(); salida = "Command: Turnright";}
	| 	<MOV>  "(" x=num() ")" {world.moveForward(x,false);salida = "Command: Moveforward ";}  
	| 	<HOP>  "(" x=num() ")" {world.moveForward(x,true);salida = "Command:Jumpforward ";}
	| 	<GO>  "(" x=num() "," y=num()")" {world.setPostion(x,y);salida = "Command:GO ";}  
	|  <PUT> "("  put() ")"					  			
	|  <PICK> "(" get()  ")"	
	|  < POP > "(" x=num() ")" {world.popBalloons(x); salida = "Comando:  Pop";} ) ";" 

{
	try {Thread.sleep(900);}
	catch (InterruptedException e) {System.err.format("IOException: %s%n", e);}	 
	sistema.printOutput(salida);
	return true;
}

)+ //TERMINO GRAN PARENTESIS
	
	}


	void put() :
	{
		int f=1;	
	}
	{
		( <CHIPS>    "," f=num() {world.putChips(f); salida = "Command:  Put Chips"; })
		|  	  ( <BALLOONS>  "," f=num() {world.putBalloons(f); salida = "Command:  Put Balloons";})	 

	}

	void get() :
	{
		int f=1;	
	}
	{
		( <CHIPS>  "," f=num() {world.pickChips(f);salida = "Command:  Pick chips";})
		|  	  ( <BALLOONS>   "," f=num() {world.grabBalloons(f);salida="Command:  Pick balloons";})	 

	}

	
	

	/**
	 * Unsigned decimal number
	 * @return the corresponding value of the string
	 * @error  corresponding value is too large
	 */

//Functions to get Type of Data

	int num() throws Error:
	{	
		int total=1;
	}
	{
		<NUM>
		{
			try 
			{
				total = Integer.parseInt(token.image);
			} 
			catch (NumberFormatException ee) 
			{
				throw new Error("Number out of bounds: "+token.image+" !!");
			}
			return total;
		}
	}
	
	String nombre() throws Error:
	{	
		String mensaje = "";
	}
	{
		<NAME>
		{
			try 
			{
				mensaje = token.image;
			} 
			catch (Exception e) 
			{
				throw new Error("Name for declaration not recognized: "+ token.image+" !!");
			}
			return mensaje;
		}
	}         


//Functions related to parameters

	void procParameter(String nombre): {String nombreParametro = "";}

	{
	 <NAME> {ArrayList<String> listaInterna = defProcParameter.get(nombre);
	 		 if (listaInterna == null) {listaInterna = new ArrayList<String>();}

	 		 try { nombreParametro = token.image;}
	 		 catch (Exception e) { throw new Error ("Name for parameter not recognized: "+ token.image +" !!"); }

	 		 listaInterna.add(nombreParametro);
	 		 defProcParameter.put(nombre,listaInterna);
	 	} 
	 		 
	}

	
	String possibleFunctionParameter(String functionName): {String posibleVariable; String returnVariable = "";}
	{
		<NAME> {
		  try { ArrayList<String > listaRecorrer = defProcParameter.get(functionName);
		  		for (String variable : listaRecorrer) {if (variable.equals(posibleVariable)) {returnVariable = variable;}}
			  }
		  catch (Exception e) { throw new Error ("parameter not recognized in function: " + token.image + "!!");}

		  return returnVariable;
		  }
	}

	int possibleDefinedVariable(String variableName): {int returnVariable = 0;}
	{
		<NAME> {
		  try {returnVariable = hashVariable.get(variableName);}
		  catch (Exception e) { throw new Error ("parameter not defined previously: " + token.image + "!!"); }

		  return returnVariable;
		 }
		  
	}

	


	